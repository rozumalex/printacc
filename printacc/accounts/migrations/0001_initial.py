# Generated by Django 2.2 on 2020-10-13 09:52

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.contrib.auth import validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Plotter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('date_added', models.DateTimeField(
                    default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Pattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('date_added', models.DateTimeField(
                    default=django.utils.timezone.now)),
                ('plotter', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    to='accounts.Plotter')),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128,
                                              verbose_name='password')),
                ('last_login',
                 models.DateTimeField(blank=True,
                                      null=True,
                                      verbose_name='last login')),
                ('is_superuser',
                 models.BooleanField(
                     default=False,
                     help_text='Designates that this user has all permissions '
                               'without explicitly assigning them.',
                     verbose_name='superuser status')),
                ('username',
                 models.CharField(
                     error_messages={'unique': 'A user with that username '
                                               'already exists.'},
                     help_text='Required. 150 characters or fewer. '
                               'Letters, digits and @/./+/-/_ only.',
                     max_length=150, unique=True, validators=[
                         validators.UnicodeUsernameValidator()],
                     verbose_name='username')),
                ('first_name',
                 models.CharField(
                     blank=True, max_length=30, verbose_name='first name')),
                ('last_name',
                 models.CharField(
                     blank=True, max_length=150, verbose_name='last name')),
                ('email',
                 models.EmailField(
                     blank=True,
                     max_length=254,
                     verbose_name='email address')),
                ('is_staff',
                 models.BooleanField(
                     default=False,
                     help_text='Designates whether the user can log into '
                               'this admin site.',
                     verbose_name='staff status')),
                ('is_active',
                 models.BooleanField(
                     default=True,
                     help_text='Designates whether this user should be '
                               'treated as active. Unselect this instead of '
                               'deleting accounts.',
                     verbose_name='active')),
                ('date_joined',
                 models.DateTimeField(
                     default=django.utils.timezone.now,
                     verbose_name='date joined')),
                ('date_added',
                 models.DateTimeField(default=django.utils.timezone.now)),
                ('groups',
                 models.ManyToManyField(
                     blank=True,
                     help_text='The groups this user belongs to. '
                               'A user will get all permissions granted '
                               'to each of their groups.',
                     related_name='user_set',
                     related_query_name='user',
                     to='auth.Group',
                     verbose_name='groups')),
                ('user_permissions',
                 models.ManyToManyField(blank=True,
                                        help_text='Specific permissions '
                                                  'for this user.',
                                        related_name='user_set',
                                        related_query_name='user',
                                        to='auth.Permission',
                                        verbose_name='user permissions')),
            ],
            options={
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('accounts.account',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Dealer',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('accounts.account',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('accounts.account',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                ('id',
                 models.AutoField(
                     auto_created=True,
                     primary_key=True,
                     serialize=False,
                     verbose_name='ID')),
                ('date_used',
                 models.DateTimeField(
                     default=django.utils.timezone.now)),
                ('pattern',
                 models.ForeignKey(
                     on_delete=django.db.models.deletion.CASCADE,
                     to='accounts.Pattern')),
                ('plotter',
                 models.ForeignKey(
                     on_delete=django.db.models.deletion.CASCADE,
                     to='accounts.Plotter')),
                ('user',
                 models.ForeignKey(
                     on_delete=django.db.models.deletion.CASCADE,
                     to='accounts.User')),
            ],
        ),
        migrations.AddField(
            model_name='plotter',
            name='dealer',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='plotter_dealer',
                to='accounts.Dealer'),
        ),
        migrations.AddField(
            model_name='plotter',
            name='users',
            field=models.ManyToManyField(to='accounts.User'),
        ),
        migrations.CreateModel(
            name='Clients',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True,
                                        serialize=False,
                                        verbose_name='ID')),
                ('limit', models.IntegerField()),
                ('dealer', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='dealer',
                    to='accounts.Dealer')),
                ('user', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    to='accounts.User')),
            ],
        ),
    ]
